import os
import sqlite3
import json
import logging
from typing import Dict, List
from telebot import TeleBot, types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import threading
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
load_dotenv(os.path.join(os.path.dirname(__file__), '..', '.env'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class AvitoTelegramBot:
    def __init__(self, token: str = None, db_path: str = None):
        self.token = token or os.getenv('BOT_TOKEN')
        if not self.token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ë–î
        if db_path is None:
            bot_dir = os.path.dirname(__file__)
            project_root = os.path.join(bot_dir, '..')
            db_path = os.path.join(project_root, 'database', 'avito_apartments.db')
            db_path = os.path.abspath(db_path)

        self.bot = TeleBot(self.token)
        self.db_path = db_path
        self.user_states = {}
        self.last_parsing_stats = {
            'status': 'not_run',
            'total_processed': 0,
            'errors': 0
        }

        self.setup_handlers()

    def setup_handlers(self):
        @self.bot.message_handler(commands=['start', 'help', 'menu'])
        def send_welcome(message):
            self.show_main_menu(message.chat.id)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('menu_'))
        def handle_menu_callback(call):
            action = call.data.replace('menu_', '')

            if action == 'parser':
                self.start_parser(call)
            elif action == 'status':
                self.show_parser_status(call)
            elif action == 'journal':
                self.show_journal(call, offset=0)
            elif action == 'settings':
                self.show_settings(call)

            self.bot.answer_callback_query(call.id)

        @self.bot.callback_query_handler(func=lambda call: call.data == 'main_menu')
        def handle_back_to_menu(call):
            self.show_main_menu(call.message.chat.id, "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*")
            self.bot.answer_callback_query(call.id)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("journal_"))
        def handle_journal_pagination(call):
            offset = int(call.data.split("_")[1])
            self.show_journal(call, offset)
            self.bot.answer_callback_query(call.id)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("object_"))
        def handle_object_click(call):
            self.handle_object_callback(call)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("settings_"))
        def handle_settings_click(call):
            if call.data == "settings_notify":
                self.bot.answer_callback_query(call.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            elif call.data == "settings_interval":
                self.bot.answer_callback_query(call.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    def show_main_menu(self, chat_id: int, message_text: str = None):
        markup = InlineKeyboardMarkup(row_width=2)

        btn_parser = InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä", callback_data="menu_parser")
        btn_status = InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞", callback_data="menu_status")
        btn_journal = InlineKeyboardButton("üìã –ñ—É—Ä–Ω–∞–ª –æ–±—ä–µ–∫—Ç–æ–≤", callback_data="menu_journal")
        btn_settings = InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")

        markup.row(btn_parser, btn_status)
        markup.row(btn_journal, btn_settings)

        text = message_text or "üè† *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–º Avito*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        self.bot.send_message(chat_id, text, reply_markup=markup, parse_mode='Markdown')

    def start_parser(self, call):
        chat_id = call.message.chat.id
        msg = self.bot.send_message(chat_id, "üîÑ *–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...*", parse_mode='Markdown')

        def run_parser():
            try:
                import sys
                project_root = os.path.join(os.path.dirname(__file__), '..')
                sys.path.append(project_root)
                os.chdir(project_root)

                from main import main as run_avito_parser

                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
                result = asyncio.run(run_avito_parser())

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if result and isinstance(result, dict):
                    self.last_parsing_stats = {
                        'status': result.get('status', 'unknown'),
                        'total_processed': result.get('processed', 0),
                        'errors': result.get('errors', 0)
                    }
                else:
                    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                    total_before = getattr(self, '_objects_before_parsing', 0)
                    total_after = self.get_total_objects()
                    new_objects = total_after - total_before

                    self.last_parsing_stats = {
                        'status': 'completed',
                        'total_processed': new_objects,
                        'errors': 0
                    }

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result_text = (
                    f"‚úÖ *–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
                    f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                    f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.last_parsing_stats['total_processed']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
                    f"‚Ä¢ –û—à–∏–±–æ–∫: {self.last_parsing_stats['errors']}"
                )

                self.bot.edit_message_text(
                    result_text,
                    chat_id=chat_id,
                    message_id=msg.message_id,
                    parse_mode='Markdown'
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
                self.last_parsing_stats = {
                    'status': 'error',
                    'total_processed': 0,
                    'errors': 1
                }
                self.bot.edit_message_text(
                    f"‚ùå *–û—à–∏–±–∫–∞:* {str(e)}",
                    chat_id=chat_id,
                    message_id=msg.message_id,
                    parse_mode='Markdown'
                )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        self._objects_before_parsing = self.get_total_objects()

        thread = threading.Thread(target=run_parser)
        thread.daemon = True
        thread.start()

    def show_parser_status(self, call):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        chat_id = call.message.chat.id

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
        total_objects = self.get_total_objects()

        last_run_text = ""

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        if self.last_parsing_stats['status'] == 'not_run':
            last_run_text = (
                "‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚ùì –ù–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è\n"
                "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0 –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
                "‚Ä¢ –û—à–∏–±–æ–∫: 0"
            )
        elif self.last_parsing_stats['status'] == 'success':
            last_run_text = (
                "‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –£—Å–ø–µ—à–Ω–æ\n"
                f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.last_parsing_stats['total_processed']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {self.last_parsing_stats['errors']}"
            )
        elif self.last_parsing_stats['status'] == 'completed_no_stats':
            last_run_text = (
                "‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω\n"
                "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã\n"
                "‚Ä¢ –û—à–∏–±–æ–∫: 0"
            )
        elif self.last_parsing_stats['status'] == 'error':
            last_run_text = (
                "‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚ùå –° –æ—à–∏–±–∫–æ–π\n"
                f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.last_parsing_stats['total_processed']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {self.last_parsing_stats['errors']}"
            )

        message_text = (
            "üìä *–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞*\n\n"
            "üíæ *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:*\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {total_objects}\n\n"
            f"üîÑ *–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫:*\n{last_run_text}"
        )

        self.bot.send_message(chat_id, message_text, parse_mode='Markdown')

    def parse_parser_output(self, output: str):
        """–ü–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ main.py –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            lines = output.split('\n')
            stats = {'total_processed': 0, 'errors': 0}

            for line in lines:
                if '–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:' in line:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ "–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 50"
                    parts = line.split(':')
                    if len(parts) > 1:
                        stats['total_processed'] = int(parts[1].strip())

                elif '–û—à–∏–±–æ–∫:' in line:
                    parts = line.split(':')
                    if len(parts) > 1:
                        stats['errors'] = int(parts[1].strip())

            return stats if stats['total_processed'] > 0 else None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã–≤–æ–¥–∞: {e}")
            return None

    def show_journal(self, call, offset: int = 0, limit: int = 5):
        chat_id = call.message.chat.id
        objects = self.get_recent_objects(offset, limit)

        if not objects:
            self.bot.send_message(chat_id, "üì≠ *–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç*\n\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.",
                                  parse_mode='Markdown')
            return

        markup = InlineKeyboardMarkup(row_width=1)

        for obj in objects:
            btn_text = f"üè† {obj['title'][:25]}... - {obj['price']}"
            markup.add(InlineKeyboardButton(btn_text, callback_data=f"object_{obj['id']}"))

        pagination_buttons = []
        total_objects = self.get_total_objects()

        if offset > 0:
            pagination_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"journal_{offset - limit}"))

        if len(objects) == limit and offset + limit < total_objects:
            pagination_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"journal_{offset + limit}"))

        if pagination_buttons:
            markup.row(*pagination_buttons)

        markup.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

        self.bot.send_message(
            chat_id,
            f"üìã *–ñ—É—Ä–Ω–∞–ª –æ–±—ä–µ–∫—Ç–æ–≤*\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {offset // limit + 1}\n–ü–æ–∫–∞–∑–∞–Ω–æ: {len(objects)} –∏–∑ {total_objects}",
            reply_markup=markup,
            parse_mode='Markdown'
        )

    def handle_object_callback(self, call):
        object_id = int(call.data.split("_")[1])
        obj = self.get_object_by_id(object_id)

        if not obj:
            self.bot.answer_callback_query(call.id, "‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        message_text = (
            f"üè† *{obj['title']}*\n\n"
            f"üí∞ *–¶–µ–Ω–∞:* {obj['price']}\n"
            f"üìç *–ê–¥—Ä–µ—Å:* {obj['address']}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {obj['desc'][:200]}..."
        )

        images = json.loads(obj['images']) if obj['images'] else []

        markup = InlineKeyboardMarkup()
        if obj['link']:
            markup.add(InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Avito", url=obj['link']))
        markup.add(InlineKeyboardButton("üìã –ö –∂—É—Ä–Ω–∞–ª—É", callback_data="journal_0"))
        markup.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

        if images:
            try:
                self.bot.send_photo(call.message.chat.id, images[0], caption=message_text, reply_markup=markup,
                                    parse_mode='Markdown')
            except Exception as e:
                self.bot.send_message(call.message.chat.id, message_text, reply_markup=markup, parse_mode='Markdown')
        else:
            self.bot.send_message(call.message.chat.id, message_text, reply_markup=markup, parse_mode='Markdown')

        self.bot.answer_callback_query(call.id)

    def show_settings(self, call):
        chat_id = call.message.chat.id

        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="settings_notify"),
            InlineKeyboardButton("‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥–∞", callback_data="settings_interval"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )

        self.bot.send_message(chat_id, "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*", reply_markup=markup, parse_mode='Markdown')

    def get_recent_objects(self, offset: int = 0, limit: int = 5):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                'SELECT id, title, price, address, desc, images, link FROM apartments ORDER BY id DESC LIMIT ? OFFSET ?',
                (limit, offset))

            objects = []
            for row in cursor.fetchall():
                objects.append({
                    'id': row[0], 'title': row[1] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", 'price': row[2] or "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                    'address': row[3] or "–ù–µ —É–∫–∞–∑–∞–Ω", 'desc': row[4] or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                    'images': row[5], 'link': row[6] or ""
                })

            conn.close()
            return objects
        except Exception:
            # –ï—Å–ª–∏ –±–∞–∑—ã –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            return []

    def get_object_by_id(self, object_id: int):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT id, title, price, address, desc, images, link FROM apartments WHERE id = ?',
                           (object_id,))
            row = cursor.fetchone()
            conn.close()

            if row:
                return {
                    'id': row[0], 'title': row[1] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", 'price': row[2] or "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                    'address': row[3] or "–ù–µ —É–∫–∞–∑–∞–Ω", 'desc': row[4] or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                    'images': row[5], 'link': row[6] or ""
                }
            return None
        except Exception:
            return None

    def get_total_objects(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM apartments')
            count = cursor.fetchone()[0]
            conn.close()
            return count
        except Exception:
            # –ï—Å–ª–∏ –±–∞–∑—ã –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
            return 0

    def get_parsing_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        total_objects = self.get_total_objects()

        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
        return {
            'total_processed': total_objects,
            'new_items': total_objects,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –Ω–æ–≤—ã–µ
            'existing_items': 0,
            'errors': 0,
            'total_in_db': total_objects
        }

    def run(self):
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        try:
            self.bot.infinity_polling()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    try:
        bot = AvitoTelegramBot()
        bot.run()
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å—Ç—å —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
