# main.py
import os
import json
import random
import asyncio
from typing import Dict, Optional
from dotenv import load_dotenv
from datetime import datetime
import hashlib
from avito_processor import AvitoProcessor, setup_avito_processor

from playwright.async_api import async_playwright, BrowserContext, TimeoutError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ services
from services.headers import CUSTOM_HEADERS

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv()

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
USER_AGENTS_FILE = 'services/user_agent_pc.txt'
COOKIES_FILE = 'cookie.json'
TARGET_URL = os.getenv('TARGET_URL')
TRASH_DIR = 'trash'

if not TARGET_URL:
    raise ValueError("–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ TARGET_URL –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ —Ñ–∞–π–ª–µ .env")

os.makedirs(TRASH_DIR, exist_ok=True)


class FileManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML –≤ –ø–∞–ø–∫—É trash
    """

    @staticmethod
    def generate_filename(url: str, suffix: str = "") -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
        """
        url_hash = hashlib.md5(url.encode()).hexdigest()[:8]
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

        clean_url = url.replace('https://', '').replace('http://', '')
        clean_url = ''.join(c if c.isalnum() or c in ('-', '_', '.') else '_' for c in clean_url)
        clean_url = clean_url[:50]

        filename = f"{timestamp}_{url_hash}_{clean_url}"
        if suffix:
            filename += f"_{suffix}"
        filename += ".html"

        return os.path.join(TRASH_DIR, filename)

    @staticmethod
    def save_html_to_file(html: str, url: str, suffix: str = "") -> str:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML –≤ —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        """
        filename = FileManager.generate_filename(url, suffix)

        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(html)
            print(f"üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
            return filename
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ HTML –≤ —Ñ–∞–π–ª: {e}")
            return ""

    @staticmethod
    def cleanup_old_files(max_files: int = 50):
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ max_files
        """
        try:
            if not os.path.exists(TRASH_DIR):
                return

            files = [os.path.join(TRASH_DIR, f) for f in os.listdir(TRASH_DIR)
                     if f.endswith('.html')]
            files.sort(key=os.path.getmtime)

            if len(files) > max_files:
                files_to_delete = files[:len(files) - max_files]
                for file_path in files_to_delete:
                    try:
                        os.remove(file_path)
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {os.path.basename(file_path)}")
                    except Exception as e:
                        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")


class RandomHeaders:
    def __init__(self):
        if not os.path.exists(USER_AGENTS_FILE):
            raise FileNotFoundError(f"–§–∞–π–ª {USER_AGENTS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        with open(USER_AGENTS_FILE, 'r', encoding='utf-8') as f:
            self.user_agents = [line.strip() for line in f.readlines() if line.strip()]

        if not self.user_agents:
            raise ValueError("–°–ø–∏—Å–æ–∫ user-–∞–≥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")

    def get_random_headers(self) -> Dict[str, str]:
        headers = CUSTOM_HEADERS.copy()
        headers['user-agent'] = random.choice(self.user_agents)
        return headers


class BrowserSession:
    def __init__(self, headless: bool = True):
        self.playwright = None
        self.browser = None
        self.context = None
        self.page = None
        self.headless = headless
        self.file_manager = FileManager()

    async def apply_stealth_measures(self, page):
        await page.add_init_script("""
            () => {
                delete navigator.__proto__.webdriver;
                Object.defineProperty(navigator, 'webdriver', {
                    get: () => undefined,
                });
                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5],
                });
                Object.defineProperty(navigator, 'languages', {
                    get: () => ['ru-RU', 'ru', 'en-US', 'en'],
                });
            }
        """)

    async def start(self):
        self.playwright = await async_playwright().start()

        launch_options = {
            'headless': self.headless,
            'args': [
                '--no-sandbox',
                '--disable-blink-features=AutomationControlled',
                '--disable-dev-shm-usage',
                '--disable-web-security',
                '--disable-features=VizDisplayCompositor',
                '--disable-extensions',
                '--disable-plugins-discovery',
                '--disable-background-timer-throttling',
                '--disable-backgrounding-occluded-windows',
                '--disable-renderer-backgrounding',
                '--disable-field-trial-config',
                '--disable-automation-controller',
            ]
        }

        self.browser = await self.playwright.chromium.launch(**launch_options)

        storage_state = COOKIES_FILE if os.path.exists(COOKIES_FILE) else None

        context_options = {
            'viewport': {'width': 1920, 'height': 1080},
            'locale': 'ru-RU',
            'timezone_id': 'Europe/Moscow',
            'permissions': ['geolocation'],
            'geolocation': {'latitude': 55.7558, 'longitude': 37.6173},
            'extra_http_headers': CUSTOM_HEADERS.copy(),
            'user_agent': random.choice(RandomHeaders().user_agents) if os.path.exists(USER_AGENTS_FILE) else None,
        }

        if storage_state:
            context_options['storage_state'] = storage_state

        self.context = await self.browser.new_context(**context_options)
        self.page = await self.context.new_page()

        await self.apply_stealth_measures(self.page)

        if not os.path.exists(COOKIES_FILE):
            print(f"–§–∞–π–ª {COOKIES_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞.")
            await self.close()

            launch_options['headless'] = False
            self.playwright = await async_playwright().start()
            self.browser = await self.playwright.chromium.launch(**launch_options)
            self.context = await self.browser.new_context(**context_options)
            self.page = await self.context.new_page()
            await self.apply_stealth_measures(self.page)

            print("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Avito.ru –¥–ª—è –ª–æ–≥–∏–Ω–∞...")
            await self.safe_goto('https://www.avito.ru')

            input("–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫...")
            await self.save_cookies()
            print(f"–ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {COOKIES_FILE}")

    async def safe_goto(self, url: str, max_retries: int = 3) -> bool:
        for attempt in range(max_retries):
            try:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ {url}")
                await self.page.goto(url, wait_until='domcontentloaded', timeout=60000)
                await asyncio.sleep(3)

                page_title = await self.page.title()
                page_url = self.page.url
                print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_title}")
                print(f"–¢–µ–∫—É—â–∏–π URL: {page_url}")

                if any(keyword in page_url.lower() or keyword in page_title.lower()
                       for keyword in ['captcha', 'challenge', 'block', 'access denied']):
                    print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞. –ü—Ä–æ–±—É–µ–º –æ–±–æ–π—Ç–∏...")
                    await asyncio.sleep(10)
                    continue

                try:
                    screenshot_path = os.path.join(TRASH_DIR, f"debug_attempt_{attempt + 1}.png")
                    await self.page.screenshot(path=screenshot_path)
                    print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
                except:
                    pass

                return True

            except TimeoutError:
                print(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}. –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
                if attempt < max_retries - 1:
                    await asyncio.sleep(5)
                    continue
                else:
                    raise
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(5)
                    try:
                        await self.page.close()
                        self.page = await self.context.new_page()
                        await self.apply_stealth_measures(self.page)
                    except:
                        pass
                    continue
                else:
                    raise
        return False

    async def set_headers(self, headers: Dict[str, str]):
        await self.context.set_extra_http_headers(headers)

    async def goto_and_wait(self, url: str) -> None:
        success = await self.safe_goto(url)

        if not success:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É {url} –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")

        try:
            await self.page.wait_for_load_state('load', timeout=30000)

            avito_selectors = [
                'div[data-marker="item"]',
                '.items-items-kAJAg',
                '[data-marker="catalog-serp"]',
                '.item-item',
                '.iva-item-root',
                '.index-content',
                '.page-body'
            ]

            for selector in avito_selectors:
                try:
                    await self.page.wait_for_selector(selector, timeout=10000)
                    print(f"‚úì –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {selector}")
                    break
                except:
                    continue
            else:
                print("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Avito, –Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

            await self.page.evaluate("window.scrollTo(0, 300)")
            await asyncio.sleep(1)

            print(f"‚úì –°—Ç—Ä–∞–Ω–∏—Ü–∞ {url} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

        except Exception as e:
            print(f"‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")

    async def get_page_content(self) -> str:
        return await self.page.content()

    async def save_cookies(self):
        await self.context.storage_state(path=COOKIES_FILE)

    async def close(self):
        if self.browser:
            await self.browser.close()
        if self.playwright:
            await self.playwright.stop()


class PageProcessor:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    –¢–µ–ø–µ—Ä—å –¢–û–õ–¨–ö–û –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTML, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ.
    """

    def __init__(self):
        self.file_manager = FileManager()

    def process_html(self, html: str, url: str, output_to_console: bool = True, callback: Optional[callable] = None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTML: –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤—ã–∑—ã–≤–∞–µ—Ç callback.
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–ª–∞—Å—Å–µ.
        """
        if output_to_console:
            print("=== –ü–†–ï–í–¨–Æ –°–¢–†–ê–ù–ò–¶–´ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤) ===")
            preview = html[:500] + "..." if len(html) > 500 else html
            print(preview)
            print("=== –ö–û–ù–ï–¶ –ü–†–ï–í–¨–Æ ===")

        if callback:
            # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ HTML, –±–µ–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
            callback(html)


class AvitoParser:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø–æ—Å—É—Ç–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥–µ –Ω–∞ Avito.
    """

    def __init__(self, headless: bool = True):
        self.target_url = TARGET_URL
        self.headers_manager = RandomHeaders()
        self.session = BrowserSession(headless=headless)
        self.processor = PageProcessor()
        self.file_manager = FileManager()

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞."""
        await self.session.start()
        await self.session.set_headers(self.headers_manager.get_random_headers())
        self.file_manager.cleanup_old_files(max_files=20)

    async def fetch_target_page(self) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML."""
        await self.session.goto_and_wait(self.target_url)
        html = await self.session.get_page_content()
        await self.session.save_cookies()
        return html

    async def parse_target(self, callback: Optional[callable] = None):
        """
        –ü–∞—Ä—Å–∏—Ç —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML –≤ —Ñ–∞–π–ª –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó.
        """
        # –ü–æ–ª—É—á–∞–µ–º HTML
        html = await self.fetch_target_page()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –≤ —Ñ–∞–π–ª
        saved_file_path = self.file_manager.save_html_to_file(html, self.target_url, "parsed")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º HTML
        self.processor.process_html(html, self.target_url, callback=callback)

        return saved_file_path  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É

    async def parse_with_processor(self):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        processor = setup_avito_processor()

        def processor_callback(html):
            stats = processor.process_html(html, self.target_url)
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['new_items']}")

        await self.parse_target(callback=processor_callback)

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞."""
        await self.session.close()


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π main
async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ Avito...")

    parser = AvitoParser(headless=False)

    try:
        await parser.start()
        await parser.parse_with_processor()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await parser.close()


if __name__ == "__main__":
    asyncio.run(main())
